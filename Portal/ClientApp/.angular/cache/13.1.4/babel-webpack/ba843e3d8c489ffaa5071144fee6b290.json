{"ast":null,"code":"import { catchError, throwError, switchMap } from 'rxjs';\nimport { LoginService } from './login.service';\nimport * as i0 from \"@angular/core\";\nexport let TokenInterceptorService = /*#__PURE__*/(() => {\n  class TokenInterceptorService {\n    constructor(inject) {\n      this.inject = inject;\n    }\n\n    intercept(request, next) {\n      let authservice = this.inject.get(LoginService);\n      let authreq = request;\n      authreq = this.AddTokenheader(request, authservice.getToken());\n      return next.handle(authreq).pipe(catchError(errordata => {\n        if (errordata.status === 401) {\n          authservice.logout();\n        }\n\n        return throwError(errordata);\n      }));\n    }\n\n    handleRefrehToken(request, next) {\n      let authservice = this.inject.get(LoginService);\n      return authservice.generateRefreshToken().pipe(switchMap(data => {\n        authservice.saveTokens(data);\n        return next.handle(this.AddTokenheader(request, data.jwtToken));\n      }), catchError(errodata => {\n        authservice.logout();\n        return throwError(errodata);\n      }));\n    }\n\n    AddTokenheader(request, token) {\n      return request.clone({\n        headers: request.headers.set('Authorization', 'bearer ' + token)\n      });\n    }\n\n  }\n\n  TokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n    return new (t || TokenInterceptorService)(i0.ɵɵinject(i0.Injector));\n  };\n\n  TokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptorService,\n    factory: TokenInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return TokenInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}